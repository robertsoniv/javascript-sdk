/**
 * OrderCloud
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ListSpec', 'model/ListSpecOption', 'model/ListSpecProductAssignment', 'model/Spec', 'model/SpecOption', 'model/SpecProductAssignment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ListSpec'), require('../model/ListSpecOption'), require('../model/ListSpecProductAssignment'), require('../model/Spec'), require('../model/SpecOption'), require('../model/SpecProductAssignment'));
  } else {
    // Browser globals (root is window)
    if (!root.OrdercloudJavascriptSdk) {
      root.OrdercloudJavascriptSdk = {};
    }
    root.OrdercloudJavascriptSdk.SpecApi = factory(root.OrdercloudJavascriptSdk.ApiClient, root.OrdercloudJavascriptSdk.ListSpec, root.OrdercloudJavascriptSdk.ListSpecOption, root.OrdercloudJavascriptSdk.ListSpecProductAssignment, root.OrdercloudJavascriptSdk.Spec, root.OrdercloudJavascriptSdk.SpecOption, root.OrdercloudJavascriptSdk.SpecProductAssignment);
  }
}(this, function(ApiClient, ListSpec, ListSpecOption, ListSpecProductAssignment, Spec, SpecOption, SpecProductAssignment) {
  'use strict';

  /**
   * Spec service.
   * @module api/SpecApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SpecApi. 
   * @alias module:api/SpecApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/SpecApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:api/SpecApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.callDelete = function(specID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling callDelete");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/specs/{specID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/SpecApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Spec} spec 
     * @param {module:api/SpecApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spec}
     */
    this.create = function(spec, callback) {
      var postBody = spec;

      // verify the required parameter 'spec' is set
      if (spec == undefined || spec == null) {
        throw new Error("Missing the required parameter 'spec' when calling create");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.apiClient.callApi(
        '/specs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOption operation.
     * @callback module:api/SpecApi~createOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:model/SpecOption} option 
     * @param {module:api/SpecApi~createOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecOption}
     */
    this.createOption = function(specID, option, callback) {
      var postBody = option;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling createOption");
      }

      // verify the required parameter 'option' is set
      if (option == undefined || option == null) {
        throw new Error("Missing the required parameter 'option' when calling createOption");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOption operation.
     * @callback module:api/SpecApi~deleteOptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:api/SpecApi~deleteOptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOption = function(specID, optionID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling deleteOption");
      }

      // verify the required parameter 'optionID' is set
      if (optionID == undefined || optionID == null) {
        throw new Error("Missing the required parameter 'optionID' when calling deleteOption");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/specs/{specID}/options/{optionID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductAssignment operation.
     * @callback module:api/SpecApi~deleteProductAssignmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} productID ID of the product.
     * @param {module:api/SpecApi~deleteProductAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProductAssignment = function(specID, productID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling deleteProductAssignment");
      }

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw new Error("Missing the required parameter 'productID' when calling deleteProductAssignment");
      }


      var pathParams = {
        'specID': specID,
        'productID': productID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/specs/{specID}/productassignments/{productID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/SpecApi~getCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:api/SpecApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spec}
     */
    this.get = function(specID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling get");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.apiClient.callApi(
        '/specs/{specID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOption operation.
     * @callback module:api/SpecApi~getOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:api/SpecApi~getOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecOption}
     */
    this.getOption = function(specID, optionID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling getOption");
      }

      // verify the required parameter 'optionID' is set
      if (optionID == undefined || optionID == null) {
        throw new Error("Missing the required parameter 'optionID' when calling getOption");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options/{optionID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/SpecApi~listCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object.<String, {String: String}>} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/SpecApi~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpec}
     */
    this.list = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ListSpec;

      return this.apiClient.callApi(
        '/specs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptions operation.
     * @callback module:api/SpecApi~listOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object.<String, {String: String}>} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/SpecApi~listOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpecOption}
     */
    this.listOptions = function(specID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling listOptions");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ListSpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductAssignments operation.
     * @callback module:api/SpecApi~listProductAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpecProductAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.specID ID of the spec.
     * @param {String} opts.productID ID of the product.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/SpecApi~listProductAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpecProductAssignment}
     */
    this.listProductAssignments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'specID': opts['specID'],
        'productID': opts['productID'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ListSpecProductAssignment;

      return this.apiClient.callApi(
        '/specs/productassignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patch operation.
     * @callback module:api/SpecApi~patchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:model/Spec} spec 
     * @param {module:api/SpecApi~patchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spec}
     */
    this.patch = function(specID, spec, callback) {
      var postBody = spec;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling patch");
      }

      // verify the required parameter 'spec' is set
      if (spec == undefined || spec == null) {
        throw new Error("Missing the required parameter 'spec' when calling patch");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.apiClient.callApi(
        '/specs/{specID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchOption operation.
     * @callback module:api/SpecApi~patchOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:model/SpecOption} option 
     * @param {module:api/SpecApi~patchOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecOption}
     */
    this.patchOption = function(specID, optionID, option, callback) {
      var postBody = option;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling patchOption");
      }

      // verify the required parameter 'optionID' is set
      if (optionID == undefined || optionID == null) {
        throw new Error("Missing the required parameter 'optionID' when calling patchOption");
      }

      // verify the required parameter 'option' is set
      if (option == undefined || option == null) {
        throw new Error("Missing the required parameter 'option' when calling patchOption");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options/{optionID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveProductAssignment operation.
     * @callback module:api/SpecApi~saveProductAssignmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SpecProductAssignment} productAssignment 
     * @param {module:api/SpecApi~saveProductAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveProductAssignment = function(productAssignment, callback) {
      var postBody = productAssignment;

      // verify the required parameter 'productAssignment' is set
      if (productAssignment == undefined || productAssignment == null) {
        throw new Error("Missing the required parameter 'productAssignment' when calling saveProductAssignment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/specs/productassignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/SpecApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:model/Spec} spec 
     * @param {module:api/SpecApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spec}
     */
    this.update = function(specID, spec, callback) {
      var postBody = spec;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling update");
      }

      // verify the required parameter 'spec' is set
      if (spec == undefined || spec == null) {
        throw new Error("Missing the required parameter 'spec' when calling update");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.apiClient.callApi(
        '/specs/{specID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOption operation.
     * @callback module:api/SpecApi~updateOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:model/SpecOption} option 
     * @param {module:api/SpecApi~updateOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecOption}
     */
    this.updateOption = function(specID, optionID, option, callback) {
      var postBody = option;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling updateOption");
      }

      // verify the required parameter 'optionID' is set
      if (optionID == undefined || optionID == null) {
        throw new Error("Missing the required parameter 'optionID' when calling updateOption");
      }

      // verify the required parameter 'option' is set
      if (option == undefined || option == null) {
        throw new Error("Missing the required parameter 'option' when calling updateOption");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options/{optionID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
