/**
 * OrderCloud
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ListSpendingAccount', 'model/ListSpendingAccountAssignment', 'model/SpendingAccount', 'model/SpendingAccountAssignment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ListSpendingAccount'), require('../model/ListSpendingAccountAssignment'), require('../model/SpendingAccount'), require('../model/SpendingAccountAssignment'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.SpendingAccountApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.ListSpendingAccount, root.OrderCloud.ListSpendingAccountAssignment, root.OrderCloud.SpendingAccount, root.OrderCloud.SpendingAccountAssignment);
  }
}(this, function(ApiClient, ListSpendingAccount, ListSpendingAccountAssignment, SpendingAccount, SpendingAccountAssignment) {
  'use strict';

  /**
   * SpendingAccount service.
   * @module api/SpendingAccountApi
   * @version 1.0
   */

  /**
   * Constructs a new SpendingAccountApi. 
   * @alias module:api/SpendingAccountApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/SpendingAccountApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} spendingAccountID ID of the spending account.
     * @param {module:api/SpendingAccountApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.callDelete = function(buyerID, spendingAccountID, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw new Error("Missing the required parameter 'buyerID' when calling callDelete");
      }

      // verify the required parameter 'spendingAccountID' is set
      if (spendingAccountID == undefined || spendingAccountID == null) {
        throw new Error("Missing the required parameter 'spendingAccountID' when calling callDelete");
      }


      var pathParams = {
        'buyerID': buyerID,
        'spendingAccountID': spendingAccountID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/{spendingAccountID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/SpendingAccountApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {module:model/SpendingAccount} spendingAccount 
     * @param {module:api/SpendingAccountApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpendingAccount}
     */
    this.create = function(buyerID, spendingAccount, callback) {
      var postBody = spendingAccount;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw new Error("Missing the required parameter 'buyerID' when calling create");
      }

      // verify the required parameter 'spendingAccount' is set
      if (spendingAccount == undefined || spendingAccount == null) {
        throw new Error("Missing the required parameter 'spendingAccount' when calling create");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = SpendingAccount;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssignment operation.
     * @callback module:api/SpendingAccountApi~deleteAssignmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} spendingAccountID ID of the spending account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userID ID of the user.
     * @param {String} opts.userGroupID ID of the user group.
     * @param {module:api/SpendingAccountApi~deleteAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAssignment = function(buyerID, spendingAccountID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw new Error("Missing the required parameter 'buyerID' when calling deleteAssignment");
      }

      // verify the required parameter 'spendingAccountID' is set
      if (spendingAccountID == undefined || spendingAccountID == null) {
        throw new Error("Missing the required parameter 'spendingAccountID' when calling deleteAssignment");
      }


      var pathParams = {
        'buyerID': buyerID,
        'spendingAccountID': spendingAccountID
      };
      var queryParams = {
        'userID': opts['userID'],
        'userGroupID': opts['userGroupID']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/{spendingAccountID}/assignments', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/SpendingAccountApi~getCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} spendingAccountID ID of the spending account.
     * @param {module:api/SpendingAccountApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpendingAccount}
     */
    this.get = function(buyerID, spendingAccountID, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw new Error("Missing the required parameter 'buyerID' when calling get");
      }

      // verify the required parameter 'spendingAccountID' is set
      if (spendingAccountID == undefined || spendingAccountID == null) {
        throw new Error("Missing the required parameter 'spendingAccountID' when calling get");
      }


      var pathParams = {
        'buyerID': buyerID,
        'spendingAccountID': spendingAccountID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = SpendingAccount;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/{spendingAccountID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/SpendingAccountApi~listCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object.<String, {String: String}>} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/SpendingAccountApi~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpendingAccount}
     */
    this.list = function(buyerID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw new Error("Missing the required parameter 'buyerID' when calling list");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ListSpendingAccount;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssignments operation.
     * @callback module:api/SpendingAccountApi~listAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpendingAccountAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.spendingAccountID ID of the spending account.
     * @param {String} opts.userID ID of the user.
     * @param {String} opts.userGroupID ID of the user group.
     * @param {String} opts.level Level of the spending account.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/SpendingAccountApi~listAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpendingAccountAssignment}
     */
    this.listAssignments = function(buyerID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw new Error("Missing the required parameter 'buyerID' when calling listAssignments");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
        'spendingAccountID': opts['spendingAccountID'],
        'userID': opts['userID'],
        'userGroupID': opts['userGroupID'],
        'level': opts['level'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ListSpendingAccountAssignment;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patch operation.
     * @callback module:api/SpendingAccountApi~patchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} spendingAccountID ID of the spending account.
     * @param {module:model/SpendingAccount} spendingAccount 
     * @param {module:api/SpendingAccountApi~patchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpendingAccount}
     */
    this.patch = function(buyerID, spendingAccountID, spendingAccount, callback) {
      var postBody = spendingAccount;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw new Error("Missing the required parameter 'buyerID' when calling patch");
      }

      // verify the required parameter 'spendingAccountID' is set
      if (spendingAccountID == undefined || spendingAccountID == null) {
        throw new Error("Missing the required parameter 'spendingAccountID' when calling patch");
      }

      // verify the required parameter 'spendingAccount' is set
      if (spendingAccount == undefined || spendingAccount == null) {
        throw new Error("Missing the required parameter 'spendingAccount' when calling patch");
      }


      var pathParams = {
        'buyerID': buyerID,
        'spendingAccountID': spendingAccountID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = SpendingAccount;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/{spendingAccountID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAssignment operation.
     * @callback module:api/SpendingAccountApi~saveAssignmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {module:model/SpendingAccountAssignment} assignment 
     * @param {module:api/SpendingAccountApi~saveAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveAssignment = function(buyerID, assignment, callback) {
      var postBody = assignment;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw new Error("Missing the required parameter 'buyerID' when calling saveAssignment");
      }

      // verify the required parameter 'assignment' is set
      if (assignment == undefined || assignment == null) {
        throw new Error("Missing the required parameter 'assignment' when calling saveAssignment");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/assignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/SpendingAccountApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} spendingAccountID ID of the spending account.
     * @param {module:model/SpendingAccount} spendingAccount 
     * @param {module:api/SpendingAccountApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpendingAccount}
     */
    this.update = function(buyerID, spendingAccountID, spendingAccount, callback) {
      var postBody = spendingAccount;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw new Error("Missing the required parameter 'buyerID' when calling update");
      }

      // verify the required parameter 'spendingAccountID' is set
      if (spendingAccountID == undefined || spendingAccountID == null) {
        throw new Error("Missing the required parameter 'spendingAccountID' when calling update");
      }

      // verify the required parameter 'spendingAccount' is set
      if (spendingAccount == undefined || spendingAccount == null) {
        throw new Error("Missing the required parameter 'spendingAccount' when calling update");
      }


      var pathParams = {
        'buyerID': buyerID,
        'spendingAccountID': spendingAccountID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = SpendingAccount;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/{spendingAccountID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
