/**
 * OrderCloud
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrderCloud);
  }
}(this, function(expect, OrderCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OrderCloud.ProductApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProductApi', function() {
    describe('productsAssignmentsGet', function() {
      it('should call productsAssignmentsGet successfully', function(done) {
        //uncomment below and update the code to test productsAssignmentsGet
        //instance.productsAssignmentsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsAssignmentsPost', function() {
      it('should call productsAssignmentsPost successfully', function(done) {
        //uncomment below and update the code to test productsAssignmentsPost
        //instance.productsAssignmentsPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsGet', function() {
      it('should call productsGet successfully', function(done) {
        //uncomment below and update the code to test productsGet
        //instance.productsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsInventoryGet', function() {
      it('should call productsInventoryGet successfully', function(done) {
        //uncomment below and update the code to test productsInventoryGet
        //instance.productsInventoryGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsPost', function() {
      it('should call productsPost successfully', function(done) {
        //uncomment below and update the code to test productsPost
        //instance.productsPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDAssignmentsBuyerIDDelete', function() {
      it('should call productsProductIDAssignmentsBuyerIDDelete successfully', function(done) {
        //uncomment below and update the code to test productsProductIDAssignmentsBuyerIDDelete
        //instance.productsProductIDAssignmentsBuyerIDDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDDelete', function() {
      it('should call productsProductIDDelete successfully', function(done) {
        //uncomment below and update the code to test productsProductIDDelete
        //instance.productsProductIDDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDGet', function() {
      it('should call productsProductIDGet successfully', function(done) {
        //uncomment below and update the code to test productsProductIDGet
        //instance.productsProductIDGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDInventoryGet', function() {
      it('should call productsProductIDInventoryGet successfully', function(done) {
        //uncomment below and update the code to test productsProductIDInventoryGet
        //instance.productsProductIDInventoryGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDInventoryInventoryPut', function() {
      it('should call productsProductIDInventoryInventoryPut successfully', function(done) {
        //uncomment below and update the code to test productsProductIDInventoryInventoryPut
        //instance.productsProductIDInventoryInventoryPut(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDPatch', function() {
      it('should call productsProductIDPatch successfully', function(done) {
        //uncomment below and update the code to test productsProductIDPatch
        //instance.productsProductIDPatch(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDPut', function() {
      it('should call productsProductIDPut successfully', function(done) {
        //uncomment below and update the code to test productsProductIDPut
        //instance.productsProductIDPut(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDVariantsGeneratePost', function() {
      it('should call productsProductIDVariantsGeneratePost successfully', function(done) {
        //uncomment below and update the code to test productsProductIDVariantsGeneratePost
        //instance.productsProductIDVariantsGeneratePost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDVariantsGet', function() {
      it('should call productsProductIDVariantsGet successfully', function(done) {
        //uncomment below and update the code to test productsProductIDVariantsGet
        //instance.productsProductIDVariantsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDVariantsInventoryGet', function() {
      it('should call productsProductIDVariantsInventoryGet successfully', function(done) {
        //uncomment below and update the code to test productsProductIDVariantsInventoryGet
        //instance.productsProductIDVariantsInventoryGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDVariantsInventoryVariantIDGet', function() {
      it('should call productsProductIDVariantsInventoryVariantIDGet successfully', function(done) {
        //uncomment below and update the code to test productsProductIDVariantsInventoryVariantIDGet
        //instance.productsProductIDVariantsInventoryVariantIDGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDVariantsInventoryVariantIDInventoryPut', function() {
      it('should call productsProductIDVariantsInventoryVariantIDInventoryPut successfully', function(done) {
        //uncomment below and update the code to test productsProductIDVariantsInventoryVariantIDInventoryPut
        //instance.productsProductIDVariantsInventoryVariantIDInventoryPut(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDVariantsVariantIDGet', function() {
      it('should call productsProductIDVariantsVariantIDGet successfully', function(done) {
        //uncomment below and update the code to test productsProductIDVariantsVariantIDGet
        //instance.productsProductIDVariantsVariantIDGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDVariantsVariantIDPatch', function() {
      it('should call productsProductIDVariantsVariantIDPatch successfully', function(done) {
        //uncomment below and update the code to test productsProductIDVariantsVariantIDPatch
        //instance.productsProductIDVariantsVariantIDPatch(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productsProductIDVariantsVariantIDPut', function() {
      it('should call productsProductIDVariantsVariantIDPut successfully', function(done) {
        //uncomment below and update the code to test productsProductIDVariantsVariantIDPut
        //instance.productsProductIDVariantsVariantIDPut(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
